<?php
$this->headScript()->appendFile('/res/js/ckeditor/ckeditor/ckeditor.js');

/** @var \Zend\View\Model\ViewModel $viewModel */
$viewModel = $this->viewModel()->getCurrent();

$errors = $viewModel->getVariable('errors', []);
$label = $viewModel->getVariable('label');
if (!$label) {
    $label = ucfirst($viewModel->getVariable('name', 'Input text'));
}
$name = $viewModel->getVariable('name');
$placeholder = $viewModel->getVariable('placeholder');
if (!$placeholder) {
    $placeholder = 'Enter ' . strtolower($label);
}
$value = stripslashes(str_replace("\r\n", "\\\n", $viewModel->getVariable('value')));

$class = $viewModel->getVariable('class');
$id = $viewModel->getVariable('id');
$disabled = '';
$disabled = $viewModel->getVariable('disabled');
if ($disabled) {
    $disabled = 'disabled=""';
}
$readonly = $viewModel->getVariable('readonly');
if ($readonly) {
    $readonly = 'readonly=""';
}
?>
<div class="form-group <?= (!empty($errors)) ? 'has-error' : ''; ?>">
    <label class="col-md-3 control-label"><?= $label ?></label>
    <div class="col-md-9">
        <textarea name="<?= $name ?>"
                  id="<?= $id ?>"
                  class="form-control <?= $class ?>"
            <?= $readonly ?>
            <?= $disabled ?>
                  placeholder="<?= $placeholder ?>"
                  rows="3"><?= $value ?></textarea>
        <?php if (!empty($errors)): ?>
            <?php if (is_array($errors)): ?>
                <span class="help-block"><?= implode('<br/> ', $errors); ?></span>
            <?php else: ?>
                <span class="help-block"><?= $errors ?></span>
            <?php endif; ?>
        <?php endif; ?>
    </div>
    <?= $this->linkToLog ?>
</div>

<?php
$this->inlineScript()->captureStart();
echo <<<JS
$(function () {
    window.onload = function() {
        CKEDITOR.replace('$name', {
            customConfig: '/res/js/ckeditor/configAdmin.js',
            startupFocus : true,          
            on: {
                instanceReady: function(ev) {
                    this.dataProcessor.writer.setRules('p', {
                        indent: false,
                        breakBeforeOpen: false,
                        breakAfterOpen: false,
                        breakBeforeClose: false,
                        breakAfterClose: false
                    });
                }
            }   
        });
    }
});
JS;
$this->inlineScript()->captureEnd();
?>
